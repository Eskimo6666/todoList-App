{"version":3,"sources":["TodoInput.js","TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","e","this","props","onChange","type","onKeyPress","submit","bind","value","content","changeTitle","key","onSubmit","Component","TodoItem","onToggle","todo","onDelete","checked","status","toggle","className","title","onClick","delete","App","state","newTodo","todoList","event","push","id","idMaker","target","deleted","setState","todos","filter","item","map","index","addTodo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SAEqBA,G,sMACLC,GACRC,KAAKC,MAAMC,SAASH,K,+BAGpB,OAAO,2BAAOI,KAAK,OACfC,WAAYJ,KAAKK,OAAOC,KAAKN,MAC7BO,MAAOP,KAAKC,MAAMO,QAClBN,SAAYF,KAAKS,YAAYH,KAAKN,U,6BAEnCD,GACW,UAAVA,EAAEW,KACFV,KAAKC,MAAMU,SAASZ,O,GAZOa,cCAlBC,E,+KACVd,GACHC,KAAKC,MAAMa,SAASf,EAAEC,KAAKC,MAAMc,Q,6BAE9BhB,GACHC,KAAKC,MAAMe,SAASjB,EAAEC,KAAKC,MAAMc,Q,+BAGjC,OACI,6BACI,2BAAOZ,KAAK,WAAWc,QAAoC,cAA3BjB,KAAKC,MAAMc,KAAKG,OAC5ChB,SAAYF,KAAKmB,OAAOb,KAAKN,QACjC,0BAAMoB,UAAU,SAASpB,KAAKC,MAAMc,KAAKM,OACzC,4BAAQC,QAAWtB,KAAKuB,OAAOjB,KAAKN,OAApC,qB,GAbsBY,aCKhCY,E,YACJ,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KACDwB,MAAQ,CACXC,QAAS,GACTC,SAAU,IAJK,E,qEAOXC,GACN5B,KAAKyB,MAAME,SAASE,KAAK,CACvBC,GAAIC,IACJV,MAAOO,EAAMI,OAAOzB,MACpBW,OAAQ,KACRe,SAAS,IAEXjC,KAAKkC,SAAS,CACZR,QAAS,GACTC,SAAU3B,KAAKyB,MAAME,a,kCAGbC,GACV5B,KAAKkC,SAAS,CACZR,QAASE,EAAMI,OAAOzB,MACtBoB,SAAU3B,KAAKyB,MAAME,a,6BAGlB5B,EAAEgB,GACPA,EAAKG,OAAyB,cAAhBH,EAAKG,OAAyB,GAAK,YACjDlB,KAAKkC,SAASlC,KAAKyB,S,6BAEd1B,EAAEgB,GACPA,EAAKkB,SAAU,EACfjC,KAAKkC,SAASlC,KAAKyB,S,+BAEX,IAAD,OACHU,EAAQnC,KAAKyB,MAAME,SACtBS,OAAQ,SAAAC,GAAI,OAAGA,EAAKJ,UACpBK,IAAI,SAACD,EAAME,GACV,OACE,wBAAI7B,IAAK2B,EAAKP,IACZ,kBAAC,EAAD,CAAUf,KAAMsB,EACdvB,SAAY,EAAKK,OAAOb,KAAK,GAC7BU,SAAY,EAAKO,OAAOjB,KAAK,QAIrC,OACE,yBAAKc,UAAU,OACb,wDACA,yBAAKA,UAAU,gBACb,wCACA,kBAAC,EAAD,CAAWZ,QAASR,KAAKyB,MAAMC,QAC7Bf,SAAUX,KAAKwC,QAAQlC,KAAKN,MAC5BE,SAAYF,KAAKS,YAAYH,KAAKN,SAEtC,yBAAKoB,UAAU,eACb,wBAAIA,UAAU,YACXe,S,GAzDKvB,aAkEdkB,EAAK,EACT,SAASC,IAEP,OADAD,GAAM,EAION,QCnEKiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ef55af84.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class TodoInput extends Component {\r\n    changeTitle(e){\r\n        this.props.onChange(e)\r\n    }\r\n    render() {\r\n        return <input type=\"text\"\r\n            onKeyPress={this.submit.bind(this)}\r\n            value={this.props.content} \r\n            onChange = {this.changeTitle.bind(this)}/>\r\n    }\r\n    submit(e) {\r\n        if (e.key === 'Enter') {\r\n            this.props.onSubmit(e)\r\n        }\r\n    }\r\n}","import React,{Component} from 'react'\r\n\r\nexport default class TodoItem extends Component{\r\n    toggle(e){\r\n        this.props.onToggle(e,this.props.todo)  //把传过来的item传回去，父组件就知道是哪个被点击\r\n    }\r\n    delete(e){\r\n        this.props.onDelete(e,this.props.todo)\r\n    }\r\n    render(){\r\n        return (\r\n            <div>\r\n                <input type=\"checkbox\" checked={this.props.todo.status === 'completed'}\r\n                    onChange = {this.toggle.bind(this)}/>\r\n                <span className=\"title\">{this.props.todo.title}</span>\r\n                <button onClick = {this.delete.bind(this)}>删除</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport 'normalize.css'\nimport './reset.css'\nimport './App.css'\nimport TodoInput from './TodoInput'\nimport TodoItem from './TodoItem'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      newTodo: '',\n      todoList: []\n    }\n  }\n  addTodo(event) {\n    this.state.todoList.push({\n      id: idMaker(),\n      title: event.target.value,\n      status: null,\n      deleted: false\n    })\n    this.setState({\n      newTodo: '',\n      todoList: this.state.todoList\n    })\n  }\n  changeTitle(event) {\n    this.setState({\n      newTodo: event.target.value,\n      todoList: this.state.todoList\n    })\n  }\n  toggle(e,todo){\n    todo.status = todo.status === 'completed' ? '' : 'completed'\n    this.setState(this.state)\n  }\n  delete(e,todo){\n    todo.deleted = true\n    this.setState(this.state)\n  }\n  render() {\n    let todos = this.state.todoList\n    .filter((item=>!item.deleted))\n    .map((item, index) => {\n      return (\n        <li key={item.id}>\n          <TodoItem todo={item}    \n            onToggle = {this.toggle.bind(this)}\n            onDelete = {this.delete.bind(this)}/>\n        </li>\n      )\n    })\n    return (\n      <div className=\"App\">\n        <h1>我的待办</h1>\n        <div className=\"inputWrapper\">\n          <h3>New Task</h3>\n          <TodoInput content={this.state.newTodo}\n            onSubmit={this.addTodo.bind(this)} \n            onChange = {this.changeTitle.bind(this)}/>\n        </div>\n        <div className=\"itemWrapper\">\n          <ol className=\"todolist\">\n            {todos}\n          </ol>\n        </div>\n\n      </div>\n    )\n  }\n}\n\nlet id = 0\nfunction idMaker() {\n  id += 1\n  return id\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}